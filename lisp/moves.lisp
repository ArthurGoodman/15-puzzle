(defvar move-symbols '(up left down right))

(defun move-up (state)
  (let ((x (get-0-x state))
        (y (get-0-y state))
        (result state))
    (if (eq y 0)
      (return-from move-up nil))
    (setf result (set-tile result x y (get-tile result x (- y 1))))
    (setf result (set-tile result x (- y 1) 0))
    (setf result (set-0-y result (- y 1)))
    result))

(defun move-left (state)
  (let ((x (get-0-x state))
        (y (get-0-y state))
        (result state))
    (if (eq x 0)
      (return-from move-left nil))
    (setf result (set-tile result x y (get-tile result (- x 1) y)))
    (setf result (set-tile result (- x 1) y 0))
    (setf result (set-0-x result (- x 1)))
    result))

(defun move-down (state)
  (let ((x (get-0-x state))
        (y (get-0-y state))
        (result state))
    (if (eq y 3)
      (return-from move-down nil))
    (setf result (set-tile result x y (get-tile result x (+ y 1))))
    (setf result (set-tile result x (+ y 1) 0))
    (setf result (set-0-y result (+ y 1)))
    result))

(defun move-right (state)
  (let ((x (get-0-x state))
        (y (get-0-y state))
        (result state))
    (if (eq x 3)
      (return-from move-right nil))
    (setf result (set-tile result x y (get-tile result (+ x 1) y)))
    (setf result (set-tile result (+ x 1) y 0))
    (setf result (set-0-x result (+ x 1)))
    result))

(defun make-move (state move)
  (case move
    ('up (move-up state))
    ('left (move-left state))
    ('down (move-down state))
    ('right (move-right state))))
